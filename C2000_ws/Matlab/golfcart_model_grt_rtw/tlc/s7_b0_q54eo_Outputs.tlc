%implements s7_b0_q54eo_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(21, 0, "")> %% rtb_MSG2ToBytes_o8
%<SLibCGIRAccessLocalVar(20, 0, "")> %% rtb_MSG2ToBytes_o7
%<SLibCGIRAccessLocalVar(19, 0, "")> %% rtb_MSG2ToBytes_o6
%<SLibCGIRAccessLocalVar(18, 0, "")> %% rtb_MSG2ToBytes_o5
%<SLibCGIRAccessLocalVar(17, 0, "")> %% rtb_MSG2ToBytes_o4
%<SLibCGIRAccessLocalVar(16, 0, "")> %% rtb_MSG2ToBytes_o3
%<SLibCGIRAccessLocalVar(15, 0, "")> %% rtb_MSG2ToBytes_o2
%<SLibCGIRAccessLocalVar(14, 0, "")> %% rtb_MSG2ToBytes_o1
%<SLibCGIRAccessLocalVar(8, 0, "")> %% rtb_MSG1ToBytes_o4
%<SLibCGIRAccessLocalVar(7, 0, "")> %% rtb_MSG1ToBytes_o3
%<SLibCGIRAccessLocalVar(6, 0, "")> %% rtb_MSG1ToBytes_o2
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T rtb_Switch;
int32_T tmp;
uint16_T rtb_MSG1ToBytes_o1;
uint16_T u0;
int8_T rtb_Saturation1;
int8_T tmp_1;
uint8_T rtb_BytePack[2];
uint8_T tmp_0;
%closefile localVarDecl
%assign tlcOutputsFcnOfS7B0 = OpaqueTLCBlockFcn("Outputs", 7, 0, 0, 3, 0)
%assign tlcOutputsFcnOfS7B9 = OpaqueTLCBlockFcn("Outputs", 7, 9, 0, 3, 1)
%assign tlcOutputsFcnOfS7B10 = OpaqueTLCBlockFcn("Outputs", 7, 10, 0, 3, 2)
%assign tlcOutputsFcnOfS7B12 = OpaqueTLCBlockFcn("Outputs", 7, 12, 0, 3, 3)
%assign tlcOutputsFcnOfS7B16 = OpaqueTLCBlockFcn("Outputs", 7, 16, 0, 3, 4)
if (%<(SLibCGIRIsSampleHit(2, 7))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS7B0)
    /* {S!d14}S-Function (c28xsci_rx): '<S4>/SCI Receive' */
%<tlcOutputsFcnOfS7B0>\
%endif
    /* {S!d20}Switch: '<S2>/Switch' incorporates:
 *  Constant: '<Root>/Constant'
 *  Constant: '<S2>/Constant'
 */
    if (golfcart_model_P.Constant_Value_e) {
        /* {S!d16}Saturate: '<S2>/[0,100]' */
        if (golfcart_model_B.SCIReceive[0] > golfcart_model_P.u100_UpperSat) {
            tmp_0 = golfcart_model_P.u100_UpperSat;
        } else if (golfcart_model_B.SCIReceive[0] < golfcart_model_P.u100_LowerSat) {
            tmp_0 = golfcart_model_P.u100_LowerSat;
        } else {
            tmp_0 = golfcart_model_B.SCIReceive[0];
        }
        /* {S!d18}Saturate: '<S2>/[0,4095]' incorporates:
 *  DataTypeConversion: '<S2>/Data Type Conversion'
 *  DataTypeConversion: '<S2>/Data Type Conversion1'
 *  Gain: '<S2>/40.95'
 *  Saturate: '<S2>/[0,100]'
 */
        u0 = (uint16_T)fmodf((real32_T)((int32_T)((uint32_T)golfcart_model_P.u095_Gain * tmp_0) >> 2), 65536.0F);
        if (u0 > golfcart_model_P.u4095_UpperSat) {
            rtb_Switch = golfcart_model_P.u4095_UpperSat;
        } else if (u0 < golfcart_model_P.u4095_LowerSat) {
            rtb_Switch = golfcart_model_P.u4095_LowerSat;
        } else {
            rtb_Switch = u0;
        }
        /* {E!d18}End of Saturate: '<S2>/[0,4095]' */
    } else {
        rtb_Switch = golfcart_model_P.Constant_Value;
    }
    /* {E!d20}End of Switch: '<S2>/Switch' */

    /* {S!d22}MATLABSystem: '<S2>/DAC' */
    MW_C2000DACSat(0, rtb_Switch);
    /* {S!d32}Switch: '<S3>/Switch1' incorporates:
 *  Constant: '<Root>/Constant1'
 *  Constant: '<S3>/Constant'
 */
    if (golfcart_model_P.Constant1_Value_f) {
        /* {S!d24}Saturate: '<S3>/Saturation1' incorporates:
 *  DataTypeConversion: '<S4>/Data Type Conversion1'
 */
        if ((int8_T)golfcart_model_B.SCIReceive[1] > golfcart_model_P.Saturation1_UpperSat) {
            rtb_Saturation1 = golfcart_model_P.Saturation1_UpperSat;
        } else if ((int8_T)golfcart_model_B.SCIReceive[1] < golfcart_model_P.Saturation1_LowerSat) {
            rtb_Saturation1 = golfcart_model_P.Saturation1_LowerSat;
        } else {
            rtb_Saturation1 = (int8_T)golfcart_model_B.SCIReceive[1];
        }
        /* {E!d24}End of Saturate: '<S3>/Saturation1' */

        /* {S!d26}DeadZone: '<S3>/Dead Zone' */
        if (rtb_Saturation1 > golfcart_model_P.DeadZone_End) {
            tmp = rtb_Saturation1 - golfcart_model_P.DeadZone_End;
            if (tmp > 127) {
                tmp = 127;
            } else if (tmp < -128) {
                tmp = -128;
            }
            rtb_Saturation1 = (int8_T)tmp;
        } else if (rtb_Saturation1 >= golfcart_model_P.DeadZone_Start) {
            rtb_Saturation1 = 0;
        } else {
            tmp = rtb_Saturation1 - golfcart_model_P.DeadZone_Start;
            if (tmp > 127) {
                tmp = 127;
            } else if (tmp < -128) {
                tmp = -128;
            }
            rtb_Saturation1 = (int8_T)tmp;
        }
        /* {E!d26}End of DeadZone: '<S3>/Dead Zone' */

        /* {S!d28}Signum: '<S3>/Sign' */
        if (rtb_Saturation1 < 0) {
            tmp_1 = -1;
        } else {
            tmp_1 = (int8_T)(rtb_Saturation1 > 0);
        }
        /* {S!d30}Switch: '<S3>/Switch' incorporates:
 *  Constant: '<S3>/Constant1'
 *  Gain: '<S3>/Gain'
 *  Gain: '<S3>/Gain1'
 *  Signum: '<S3>/Sign'
 *  Sum: '<S3>/Add'
 *  Sum: '<S3>/Subtract'
 */
        if (tmp_1 >= golfcart_model_P.Switch_Threshold) {
            rtb_Switch = (real_T)(golfcart_model_P.Gain_Gain * rtb_Saturation1) * 0.5 + golfcart_model_P.Constant1_Value;
        } else {
            rtb_Switch = golfcart_model_P.Constant1_Value - (real_T)(golfcart_model_P.Gain1_Gain * rtb_Saturation1) * 0.5;
        }
        /* {E!d30}End of Switch: '<S3>/Switch' */
    } else {
        rtb_Switch = golfcart_model_P.Constant_Value_l;
    }
    /* {E!d32}End of Switch: '<S3>/Switch1' */

    /* {S!d38}DataTypeConversion: '<S3>/Data Type Conversion' */
    rtb_Switch = %<(SLibCGCallSubFcn("rt_roundd_snf", ["rtb_Switch"], 0, 3, 0))>;
    if (rtIsNaN(rtb_Switch) || rtIsInf(rtb_Switch)) {
        rtb_Switch = 0.0;
    } else {
        rtb_Switch = fmod(rtb_Switch, 256.0);
    }
    if (rtb_Switch < 0.0) {
        /* {S!d34}DataTypeConversion: '<S3>/Data Type Conversion' */
        golfcart_model_B.DataTypeConversion = (uint8_T)-(int8_T)(uint8_T)-rtb_Switch;
    } else {
        /* {S!d36}DataTypeConversion: '<S3>/Data Type Conversion' */
        golfcart_model_B.DataTypeConversion = (uint8_T)rtb_Switch;
    }
    /* {E!d38}End of DataTypeConversion: '<S3>/Data Type Conversion' */
%if !WHITE_SPACE(tlcOutputsFcnOfS7B9)

    /* {S!d40}S-Function (c28xsci_tx): '<S3>/SCI Transmit' */
%<tlcOutputsFcnOfS7B9>\
%endif
}
if (%<(SLibCGIRIsSampleHit(1, 7))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS7B10)
    /* {S!d42}S-Function (c280xcanrcv): '<S1>/CAN Receive' */
%<tlcOutputsFcnOfS7B10>\
%endif
    /* {S!d44}S-Function (byte2any_svd): '<S1>/MSG1 To Bytes' */
                                      
  /* Unpack: <S1>/MSG1 To Bytes */
  {
     uint32_T MW_inputPortOffset = 0U;
     uint16_T MW_outputPortWidth = 0U;

  /* Packed input data type - uint8_T */
  void* unpackData = &golfcart_model_B.CANReceive_o2[0];
  /* Unpacking the values to output 1 */
  /* Output data type - uint16_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint16_T);
            memcpy((void*)&rtb_MSG1ToBytes_o1, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 2 */
  /* Output data type - uint16_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint16_T);
            memcpy((void*)&rtb_MSG1ToBytes_o2, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 3 */
  /* Output data type - uint16_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint16_T);
            memcpy((void*)&rtb_MSG1ToBytes_o3, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 4 */
  /* Output data type - uint16_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint16_T);
            memcpy((void*)&rtb_MSG1ToBytes_o4, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
  }
 

%if !WHITE_SPACE(tlcOutputsFcnOfS7B12)
    /* {S!d46}S-Function (c280xcanrcv): '<S1>/CAN Receive1' */
%<tlcOutputsFcnOfS7B12>\
%endif
    /* {S!d48}S-Function (byte2any_svd): '<S1>/MSG2 To Bytes' */
                                      
  /* Unpack: <S1>/MSG2 To Bytes */
  {
     uint32_T MW_inputPortOffset = 0U;
     uint16_T MW_outputPortWidth = 0U;

  /* Packed input data type - uint8_T */
  void* unpackData = &golfcart_model_B.CANReceive1_o2[0];
  /* Unpacking the values to output 1 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o1, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 2 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o2, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 3 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o3, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 4 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o4, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 5 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o5, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 6 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o6, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 7 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o7, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
     /* Offset calculations based on alignment for packing next input */
             MW_inputPortOffset = MW_inputPortOffset + MW_outputPortWidth;
  /* Unpacking the values to output 8 */
  /* Output data type - uint8_T, size - 1 */
        {
                MW_outputPortWidth = sizeof(uint8_T);
            memcpy((void*)&rtb_MSG2ToBytes_o8, (void *)&(((uint8_T *)unpackData)[MW_inputPortOffset]), MW_outputPortWidth);
        }
     
  }
 

    /* {S!d50}S-Function (any2byte_svd): '<S4>/Byte Pack' */
                                    

  /* Pack: <S4>/Byte Pack */
  {
     uint32_T MW_outputPortOffset = 0U;
     uint16_T MW_inputPortWidth = 0U;

  /* Packed output data type - uint8_T */
  void* packData = &rtb_BytePack[0];
  /* Packing the values of Input 1 */
  /* Input data type - uint16_T, size - 1 */
        {
                MW_inputPortWidth = sizeof(uint16_T);
            memcpy((void *)&(((uint8_T *)packData)[MW_outputPortOffset]), (void*)&rtb_MSG1ToBytes_o1, MW_inputPortWidth);
        }
     
  }
 

    /* {S!d52}SignalConversion generated from: '<S4>/SCI Transmit' incorporates:
 *  Constant: '<S4>/Constant'
 */
    golfcart_model_B.TmpSignalConversionAtSCITransmi[0] = golfcart_model_P.Constant_Value_p;
    golfcart_model_B.TmpSignalConversionAtSCITransmi[1] = rtb_BytePack[0];
    golfcart_model_B.TmpSignalConversionAtSCITransmi[2] = rtb_BytePack[1];
    golfcart_model_B.TmpSignalConversionAtSCITransmi[3] = %<(SLibCG_SE(SLibCG_Grnd(0, 3, 1, "", -1, "", 0)))>;
%if !WHITE_SPACE(tlcOutputsFcnOfS7B16)
    /* {S!d54}S-Function (c28xsci_tx): '<S4>/SCI Transmit' */
%<tlcOutputsFcnOfS7B16>\
%endif
}
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%endfunction
